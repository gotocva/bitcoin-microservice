"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BaseNetwork = /** @class */ (function () {
    function BaseNetwork() {
    }
    return BaseNetwork;
}());
exports.BaseNetwork = BaseNetwork;
var Mainnet = /** @class */ (function (_super) {
    __extends(Mainnet, _super);
    function Mainnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "mainnet" /* MAINNET */;
        return _this;
    }
    return Mainnet;
}(BaseNetwork));
var Testnet = /** @class */ (function (_super) {
    __extends(Testnet, _super);
    function Testnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "testnet" /* TESTNET */;
        return _this;
    }
    return Testnet;
}(BaseNetwork));
/**
 * Mainnet abstract class for Bitcoin forks. These are the constants from the Bitcoin main network,
 * which are overridden to various degrees by each Bitcoin fork.
 *
 * This allows us to not redefine these properties for forks which haven't changed them from Bitcoin.
 *
 * However, if a coin network has changed one of these properties, and you accidentally forget to override,
 * you'll inherit the incorrect values from the Bitcoin network. Be wary, and double check your network constant
 * overrides to ensure you're not missing any changes.
 */
var BitcoinLikeMainnet = /** @class */ (function (_super) {
    __extends(BitcoinLikeMainnet, _super);
    function BitcoinLikeMainnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // https://github.com/bitcoin/bitcoin/blob/master/src/validation.cpp
        // https://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp
        _this.messagePrefix = '\x18Bitcoin Signed Message:\n';
        _this.bip32 = {
            // base58 'xpub'
            public: 0x0488b21e,
            // base58 'xprv'
            private: 0x0488ade4,
        };
        _this.pubKeyHash = 0x00;
        _this.scriptHash = 0x05;
        _this.wif = 0x80;
        _this.type = "mainnet" /* MAINNET */;
        return _this;
    }
    return BitcoinLikeMainnet;
}(Mainnet));
/**
 * Testnet abstract class for Bitcoin forks. Works exactly the same as `BitcoinLikeMainnet`,
 * except the constants are taken from the Bitcoin test network.
 */
var BitcoinLikeTestnet = /** @class */ (function (_super) {
    __extends(BitcoinLikeTestnet, _super);
    function BitcoinLikeTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // https://github.com/bitcoin/bitcoin/blob/master/src/validation.cpp
        // https://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp
        _this.messagePrefix = '\x18Bitcoin Signed Message:\n';
        _this.bip32 = {
            public: 0x043587cf,
            private: 0x04358394,
        };
        _this.pubKeyHash = 0x6f;
        _this.scriptHash = 0xc4;
        _this.wif = 0xef;
        _this.type = "testnet" /* TESTNET */;
        return _this;
    }
    return BitcoinLikeTestnet;
}(Testnet));
var Algorand = /** @class */ (function (_super) {
    __extends(Algorand, _super);
    function Algorand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "algo" /* ALGO */;
        _this.explorerUrl = 'https://algoexplorer.io/tx/';
        return _this;
    }
    return Algorand;
}(Mainnet));
var AlgorandTestnet = /** @class */ (function (_super) {
    __extends(AlgorandTestnet, _super);
    function AlgorandTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "algo" /* ALGO */;
        _this.explorerUrl = 'https://testnet.algoexplorer.io/tx/';
        return _this;
    }
    return AlgorandTestnet;
}(Testnet));
var Bitcoin = /** @class */ (function (_super) {
    __extends(Bitcoin, _super);
    function Bitcoin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "btc" /* BTC */;
        _this.explorerUrl = 'https://smartbit.com.au/tx/';
        _this.bech32 = 'bc';
        return _this;
    }
    return Bitcoin;
}(BitcoinLikeMainnet));
var BitcoinTestnet = /** @class */ (function (_super) {
    __extends(BitcoinTestnet, _super);
    function BitcoinTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "btc" /* BTC */;
        _this.explorerUrl = 'https://testnet.smartbit.com.au/tx/';
        _this.bech32 = 'tb';
        return _this;
    }
    return BitcoinTestnet;
}(BitcoinLikeTestnet));
// https://github.com/Bitcoin-ABC/bitcoin-abc/blob/master/src/validation.cpp
// https://github.com/Bitcoin-ABC/bitcoin-abc/blob/master/src/chainparams.cpp
var BitcoinCash = /** @class */ (function (_super) {
    __extends(BitcoinCash, _super);
    function BitcoinCash() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "bch" /* BCH */;
        _this.explorerUrl = 'http://blockdozer.com/tx/';
        return _this;
    }
    return BitcoinCash;
}(BitcoinLikeMainnet));
var BitcoinCashTestnet = /** @class */ (function (_super) {
    __extends(BitcoinCashTestnet, _super);
    function BitcoinCashTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "bch" /* BCH */;
        _this.explorerUrl = 'https://tbch.blockdozer.com/tx/';
        return _this;
    }
    return BitcoinCashTestnet;
}(BitcoinLikeTestnet));
// https://github.com/bitcoin-sv/bitcoin-sv/blob/master/src/validation.cpp
// https://github.com/bitcoin-sv/bitcoin-sv/blob/master/src/chainparams.cpp
var BitcoinSV = /** @class */ (function (_super) {
    __extends(BitcoinSV, _super);
    function BitcoinSV() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "bsv" /* BSV */;
        _this.explorerUrl = 'https://blockchair.com/bitcoin-sv/transaction/';
        return _this;
    }
    return BitcoinSV;
}(BitcoinLikeMainnet));
var BitcoinSVTestnet = /** @class */ (function (_super) {
    __extends(BitcoinSVTestnet, _super);
    function BitcoinSVTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "bsv" /* BSV */;
        _this.explorerUrl = 'https://testnet.bitcoincloud.net/tx/';
        return _this;
    }
    return BitcoinSVTestnet;
}(BitcoinLikeTestnet));
// https://github.com/BTCGPU/BTCGPU/blob/master/src/validation.cpp
// https://github.com/BTCGPU/BTCGPU/blob/master/src/chainparams.cpp
var BitcoinGold = /** @class */ (function (_super) {
    __extends(BitcoinGold, _super);
    function BitcoinGold() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.messagePrefix = '\x18Bitcoin Gold Signed Message:\n';
        _this.bech32 = 'btg';
        _this.pubKeyHash = 0x26;
        _this.scriptHash = 0x17;
        _this.family = "btg" /* BTG */;
        _this.explorerUrl = 'https://btgexplorer.com/tx/';
        return _this;
    }
    return BitcoinGold;
}(BitcoinLikeMainnet));
// https://github.com/dashpay/dash/blob/master/src/validation.cpp
// https://github.com/dashpay/dash/blob/master/src/chainparams.cpp
var Dash = /** @class */ (function (_super) {
    __extends(Dash, _super);
    function Dash() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.messagePrefix = '\x19DarkCoin Signed Message:\n';
        _this.pubKeyHash = 0x4c;
        _this.scriptHash = 0x10;
        _this.wif = 0xcc;
        _this.family = "dash" /* DASH */;
        _this.explorerUrl = 'https://insight.dashevo.org/insight/tx/';
        return _this;
    }
    return Dash;
}(BitcoinLikeMainnet));
var DashTestnet = /** @class */ (function (_super) {
    __extends(DashTestnet, _super);
    function DashTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.messagePrefix = '\x19DarkCoin Signed Message:\n';
        _this.pubKeyHash = 0x8c;
        _this.scriptHash = 0x13;
        _this.family = "dash" /* DASH */;
        _this.explorerUrl = 'https://tbch.blockdozer.com/tx/';
        return _this;
    }
    return DashTestnet;
}(BitcoinLikeTestnet));
var Ethereum = /** @class */ (function (_super) {
    __extends(Ethereum, _super);
    function Ethereum() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "eth" /* ETH */;
        _this.explorerUrl = 'https://etherscan.io/tx/';
        return _this;
    }
    return Ethereum;
}(Mainnet));
var Kovan = /** @class */ (function (_super) {
    __extends(Kovan, _super);
    function Kovan() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "eth" /* ETH */;
        _this.explorerUrl = 'https://kovan.etherscan.io/tx/';
        return _this;
    }
    return Kovan;
}(Testnet));
var Eos = /** @class */ (function (_super) {
    __extends(Eos, _super);
    function Eos() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "eos" /* EOS */;
        _this.explorerUrl = 'https://bloks.io/transaction/';
        return _this;
    }
    return Eos;
}(Mainnet));
var EosTestnet = /** @class */ (function (_super) {
    __extends(EosTestnet, _super);
    function EosTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "eos" /* EOS */;
        _this.explorerUrl = 'https://jungle.bloks.io/transaction/';
        return _this;
    }
    return EosTestnet;
}(Testnet));
// https://github.com/litecoin-project/litecoin/blob/master/src/validation.cpp
// https://github.com/litecoin-project/litecoin/blob/master/src/chainparams.cpp
var Litecoin = /** @class */ (function (_super) {
    __extends(Litecoin, _super);
    function Litecoin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.messagePrefix = '\x19Litecoin Signed Message:\n';
        _this.bech32 = 'ltc';
        _this.pubKeyHash = 0x30;
        _this.scriptHash = 0x32;
        _this.wif = 0xb0;
        _this.family = "ltc" /* LTC */;
        _this.explorerUrl = 'https://live.blockcypher.com/ltc/tx/';
        return _this;
    }
    return Litecoin;
}(BitcoinLikeMainnet));
var LitecoinTestnet = /** @class */ (function (_super) {
    __extends(LitecoinTestnet, _super);
    function LitecoinTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.messagePrefix = '\x19Litecoin Signed Message:\n';
        _this.bech32 = 'tltc';
        _this.pubKeyHash = 0x6f;
        _this.scriptHash = 0x3a;
        _this.family = "ltc" /* LTC */;
        _this.explorerUrl = 'http://explorer.litecointools.com/tx/';
        return _this;
    }
    return LitecoinTestnet;
}(BitcoinLikeTestnet));
var Ofc = /** @class */ (function (_super) {
    __extends(Ofc, _super);
    function Ofc() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "ofc" /* OFC */;
        _this.explorerUrl = undefined;
        return _this;
    }
    return Ofc;
}(Mainnet));
var OfcTestnet = /** @class */ (function (_super) {
    __extends(OfcTestnet, _super);
    function OfcTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "ofc" /* OFC */;
        _this.explorerUrl = undefined;
        return _this;
    }
    return OfcTestnet;
}(Testnet));
var Stellar = /** @class */ (function (_super) {
    __extends(Stellar, _super);
    function Stellar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "xlm" /* XLM */;
        _this.explorerUrl = 'https://stellar.expert/explorer/public/tx/';
        return _this;
    }
    return Stellar;
}(Mainnet));
var StellarTestnet = /** @class */ (function (_super) {
    __extends(StellarTestnet, _super);
    function StellarTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "xlm" /* XLM */;
        _this.explorerUrl = 'https://stellar.expert/explorer/testnet/tx/';
        return _this;
    }
    return StellarTestnet;
}(Testnet));
var SUSD = /** @class */ (function (_super) {
    __extends(SUSD, _super);
    function SUSD() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "susd" /* SUSD */;
        _this.explorerUrl = undefined;
        return _this;
    }
    return SUSD;
}(Mainnet));
var SUSDTestnet = /** @class */ (function (_super) {
    __extends(SUSDTestnet, _super);
    function SUSDTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "susd" /* SUSD */;
        _this.explorerUrl = undefined;
        return _this;
    }
    return SUSDTestnet;
}(Testnet));
var Trx = /** @class */ (function (_super) {
    __extends(Trx, _super);
    function Trx() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "trx" /* TRX */;
        _this.explorerUrl = 'https://tronscan.org/#/transaction/';
        return _this;
    }
    return Trx;
}(Mainnet));
var TrxTestnet = /** @class */ (function (_super) {
    __extends(TrxTestnet, _super);
    function TrxTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "trx" /* TRX */;
        _this.explorerUrl = 'https://shasta.tronscan.org/#/transaction/';
        return _this;
    }
    return TrxTestnet;
}(Testnet));
var Xrp = /** @class */ (function (_super) {
    __extends(Xrp, _super);
    function Xrp() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "xrp" /* XRP */;
        _this.explorerUrl = 'https://xrpcharts.ripple.com/#/transactions/';
        return _this;
    }
    return Xrp;
}(Mainnet));
var XrpTestnet = /** @class */ (function (_super) {
    __extends(XrpTestnet, _super);
    function XrpTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "xrp" /* XRP */;
        _this.explorerUrl = 'https://xrpcharts.ripple.com/#/transactions/';
        return _this;
    }
    return XrpTestnet;
}(Testnet));
var Xtz = /** @class */ (function (_super) {
    __extends(Xtz, _super);
    function Xtz() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "xtz" /* XTZ */;
        _this.explorerUrl = 'https://tezblock.io/transaction/';
        return _this;
    }
    return Xtz;
}(Mainnet));
var XtzTestnet = /** @class */ (function (_super) {
    __extends(XtzTestnet, _super);
    function XtzTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = "xtz" /* XTZ */;
        _this.explorerUrl = 'https://babylonnet.tezblock.io/transaction/';
        return _this;
    }
    return XtzTestnet;
}(Testnet));
// https://github.com/zcash/zcash/blob/master/src/validation.cpp
// https://github.com/zcash/zcash/blob/master/src/chainparams.cpp
var ZCash = /** @class */ (function (_super) {
    __extends(ZCash, _super);
    function ZCash() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.messagePrefix = '\x18ZCash Signed Message:\n';
        _this.pubKeyHash = 0x1cb8;
        _this.scriptHash = 0x1cbd;
        _this.family = "zec" /* ZEC */;
        _this.explorerUrl = 'https://zcash.blockexplorer.com/tx/';
        return _this;
    }
    return ZCash;
}(BitcoinLikeMainnet));
var ZCashTestnet = /** @class */ (function (_super) {
    __extends(ZCashTestnet, _super);
    function ZCashTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.messagePrefix = '\x18ZCash Signed Message:\n';
        _this.pubKeyHash = 0x1d25;
        _this.scriptHash = 0x1cba;
        _this.family = "zec" /* ZEC */;
        _this.explorerUrl = 'https://explorer.testnet.z.cash/tx/';
        return _this;
    }
    return ZCashTestnet;
}(BitcoinLikeTestnet));
exports.Networks = {
    main: {
        algorand: Object.freeze(new Algorand()),
        bitcoin: Object.freeze(new Bitcoin()),
        bitcoinCash: Object.freeze(new BitcoinCash()),
        bitcoinGold: Object.freeze(new BitcoinGold()),
        bitcoinSV: Object.freeze(new BitcoinSV()),
        dash: Object.freeze(new Dash()),
        eos: Object.freeze(new Eos()),
        ethereum: Object.freeze(new Ethereum()),
        litecoin: Object.freeze(new Litecoin()),
        ofc: Object.freeze(new Ofc()),
        stellar: Object.freeze(new Stellar()),
        susd: Object.freeze(new SUSD()),
        trx: Object.freeze(new Trx()),
        xrp: Object.freeze(new Xrp()),
        xtz: Object.freeze(new Xtz()),
        zCash: Object.freeze(new ZCash()),
    },
    test: {
        algorand: Object.freeze(new AlgorandTestnet()),
        bitcoin: Object.freeze(new BitcoinTestnet()),
        bitcoinCash: Object.freeze(new BitcoinCashTestnet()),
        bitcoinSV: Object.freeze(new BitcoinSVTestnet()),
        dash: Object.freeze(new DashTestnet()),
        eos: Object.freeze(new EosTestnet()),
        kovan: Object.freeze(new Kovan()),
        litecoin: Object.freeze(new LitecoinTestnet()),
        ofc: Object.freeze(new OfcTestnet()),
        stellar: Object.freeze(new StellarTestnet()),
        susd: Object.freeze(new SUSDTestnet()),
        trx: Object.freeze(new TrxTestnet()),
        xrp: Object.freeze(new XrpTestnet()),
        xtz: Object.freeze(new XtzTestnet()),
        zCash: Object.freeze(new ZCashTestnet()),
    },
};
//# sourceMappingURL=data:application/json;base64,